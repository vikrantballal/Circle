Practical 7 : Implementation of constraint satisfaction problems using Prolog.

Q1.SEND + MORE = MONEY

code:

% Define the constraint that ensures no two variables have the same digit.
all_different([]).


all_different([H | T]) :- \+ member(H, T), all_different(T).
% Define the main predicate for solving the puzzle.
send_more_money([S, E, N, D, M, O, R, Y]) :-
    Digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
    member(S, Digits), S > 0,
    member(E, Digits),
    member(N, Digits),
    member(D, Digits),
    member(M, Digits), M > 0,
    member(O, Digits),
    member(R, Digits),
    member(Y, Digits),
    all_different([S, E, N, D, M, O, R, Y]),
    1000 * S + 100 * E + 10 * N + D +
    1000 * M + 100 * O + 10 * R + E =:=
    10000 * M + 1000 * O + 100 * N + 10 * E + Y.

save as practice.pl

GNU prolog :

In gnu prolog go to change dir > select folder where file is save > click on that folder

enter name of file [practice].

Run the code:

send_more_money([S, E, N, D, M, O, R, Y]).



Q2.YOUR + YOU = HEART

code:

% Constraint: all digits must be different
all_different([]).
all_different([H | T]) :- \+ member(H, T), all_different(T).


% Main predicate for YOUR + YOU = HEART
your_you_heart([Y, O, U, R, H, E, A, T]) :-
    Digits = [0,1,2,3,4,5,6,7,8,9],


    % Assign variables from Digits
    member(Y, Digits), Y > 0,   % Leading digit (Y) cannot be zero
    member(O, Digits),
    member(U, Digits),
    member(R, Digits),
    member(H, Digits), H > 0,   % Leading digit (H) cannot be zero
    member(E, Digits),
    member(A, Digits),
    member(T, Digits),


    % Ensure uniqueness
    all_different([Y, O, U, R, H, E, A, T]),


    % Equation: YOUR + YOU = HEART
    1000*Y + 100*O + 10*U + R +
    100*Y + 10*O + U =:=
    10000*H + 1000*E + 100*A + 10*R + T.



Q3.TO + GO = OUT

code:

% all different constraint
all_different([]).
all_different([H|T]) :- \+ member(H, T), all_different(T).


% TO + GO = OUT
to_go_out([T, O, G, U]) :-
    Digits = [0,1,2,3,4,5,6,7,8,9],


    % choose digits
    member(T, Digits), T > 0,   % T is leading digit of TO
    member(G, Digits), G > 0,   % G is leading digit of GO
    member(O, Digits), O > 0,   % O is leading digit of OUT
    member(U, Digits),          % U can be zero


    % all different letters
    all_different([T,O,G,U]),


    % numeric equation
    10*T + O + 10*G + O =:= 100*O + 10*U + T.



